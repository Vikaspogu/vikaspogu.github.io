<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tekton on My approach...</title>
    <link>https://vikaspogu.dev/tags/tekton/</link>
    <description>Recent content in tekton on My approach...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://vikaspogu.dev/tags/tekton/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Build multi arch docker image using Tekton</title>
      <link>https://vikaspogu.dev/posts/tekton-multiarch-buildx/</link>
      <pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://vikaspogu.dev/posts/tekton-multiarch-buildx/</guid>
      <description>There are three different strategies to build multi-platform images that are supported by Buildx and Dockerfiles:
 Using the QEMU emulation support in the kernel Building on multiple native nodes using the same builder instance Using a stage in Dockerfile to cross-compile to different architectures  I’ll focus on the first option, cross building with emulation.
docker buildx build --platform linux/amd64,linux/arm64 . Setup This differs from platform to platform but one thing we all have in common is pipelines, so I’ve constructed a basic buildx setup for TektonCD task.</description>
    </item>
    
    <item>
      <title>Tekton triggers and Interceptors</title>
      <link>https://vikaspogu.dev/posts/tekton-triggers-cel-interception/</link>
      <pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://vikaspogu.dev/posts/tekton-triggers-cel-interception/</guid>
      <description>Tekton Triggers work by having EventListeners receive incoming webhook notifications, processing them using an Interceptor, and creating Kubernetes resources from templates if the interceptor allows it, with extraction of fields from the body of the webhook
CEL Interceptors can be used to filter or modify incoming events. for example if you want to truncate commit id from the webhook body
apiVersion:triggers.tekton.dev/v1alpha1kind:EventListenermetadata:name:shared-listenernamespace:defaultspec:serviceAccountName:build-bottriggers:- name:shared-pipeline-triggerinterceptors:- cel:overlays:- key:intercepted.commit_id_shortexpression:&amp;#34;body.head_commit.id.truncate(7)&amp;#34;bindings:- ref:pipeline-bindingtemplate:ref:pipeline-templateApplied overlay can be extracted using a extensions body in the binding.</description>
    </item>
    
    <item>
      <title>GitOps with Tekton and ArgoCD</title>
      <link>https://vikaspogu.dev/posts/tekton-argocd-gitops/</link>
      <pubDate>Thu, 14 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://vikaspogu.dev/posts/tekton-argocd-gitops/</guid>
      <description>In this post, I will:
 Use Tekton to build and publish image to docker registry Trigger a Tekton pipeline from GitHub Use Argo to deploy application   alt argo-flow-1 
Getting Started Assumptions:
 You have a running OpenShift 4 cluster with ArgoCD, and OpenShift Pipelines installed. If not, you follow instructions to OpenShift Pipelines and ArgoCD Operator Understand of basic argocd and tekton concepts  Create an OpenShift project called node-web-project</description>
    </item>
    
  </channel>
</rss>
