<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Openshift on vikaspogu</title>
    <link>https://vikaspogu.dev/tags/openshift/</link>
    <description>Recent content in Openshift on vikaspogu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 18 Aug 2020 14:47:02 -0500</lastBuildDate><atom:link href="https://vikaspogu.dev/tags/openshift/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OPA Gatekeeper on Openshift</title>
      <link>https://vikaspogu.dev/posts/opa-gatekeeper-openshift/</link>
      <pubDate>Tue, 18 Aug 2020 14:47:02 -0500</pubDate>
      
      <guid>https://vikaspogu.dev/posts/opa-gatekeeper-openshift/</guid>
      <description>Every organization has policies. Some are essential to meet governance and legal requirements. Others help ensure adherence to best practices and institutional conventions. Attempting to ensure compliance manually would be error-prone and frustrating
OPA lets you specific policy as code using OPA policy language Rego
In this post, I&amp;rsquo;ll share my experience deploying OPA Gatekeeper on Openshift and creating few policies for demonstartions. This post is not an introduction to OPA, refer to for intro</description>
    </item>
    
    <item>
      <title>Openshift Jenkins configuration via JCasC plugin</title>
      <link>https://vikaspogu.dev/posts/jenkins-config-as-code-openshift/</link>
      <pubDate>Mon, 06 Jul 2020 13:23:05 -0500</pubDate>
      
      <guid>https://vikaspogu.dev/posts/jenkins-config-as-code-openshift/</guid>
      <description>Deploying Jenkins on Kubernetes provides important benefits over a standard VM-based deployment. For example, gaining the ability to have project-specific Jenkins slaves (agents) on demand, instead of having a pool of VMs idle waiting for a job.
Jenkins can be easily deployed using Helm, Openshift using jenkins catalog
As everyone has experienced setting up Jenkins is a complex process, as both Jenkins and its plugins require some tuning and configuration, with dozens of parameters to set within the web UI manage section</description>
    </item>
    
    <item>
      <title>Jenkins Openshift OAuth SSL</title>
      <link>https://vikaspogu.dev/posts/openshift-jenkins-oauth-ssl/</link>
      <pubDate>Mon, 10 Feb 2020 17:24:56 -0500</pubDate>
      
      <guid>https://vikaspogu.dev/posts/openshift-jenkins-oauth-ssl/</guid>
      <description>Recently, I encountered an issue while authenticating to Openshift Jenkins using Openshift OAuth plugin where trusted certificate provided by CA that aren&amp;rsquo;t included in the default JRE TrustStore.
Logs from Jenkins pod
2020-02-10 21:19:07.335+0000 [id=17]	INFO	o.o.j.p.o.OpenShiftOAuth2SecurityRealm#transportToUse: OpenShift OAuth got an SSL error when accessing the issuer&amp;#39;s token endpoint when using the SA certificate2020-02-10 21:19:07.348+0000 [id=17]	INFO	o.o.j.p.o.OpenShiftOAuth2SecurityRealm#transportToUse: OpenShift OAuth provider token endpoint failed unexpectedly using the JVMs default keystore sun.</description>
    </item>
    
    <item>
      <title>Permission denied pushing to Openshift Registry</title>
      <link>https://vikaspogu.dev/posts/ocp-docker-registry-500-err/</link>
      <pubDate>Wed, 18 Dec 2019 12:10:07 -0500</pubDate>
      
      <guid>https://vikaspogu.dev/posts/ocp-docker-registry-500-err/</guid>
      <description>Recently, i ran into a issue where pushing images to the docker registry after a build fails
Pushing image docker-registry.default.svc:5000/simple-go-build/simple-go:latest ... Registry server Address: Registry server User Name: serviceaccount Registry server Email: serviceaccount@example.org Registry server Password: &amp;lt;&amp;lt;non-empty&amp;gt;&amp;gt; error: build error: Failed to push image: received unexpected HTTP status: 500 Internal Server Error Registry pods logs show permission denied
err.code=UNKNOWN err.detail=&amp;#34;filesystem: mkdir /registry/docker/registry/v2/repositories/simple-go-build/simple-go/_uploads/c34415b4-c6d8-42ba-9854-aee449efd984: permission denied&amp;#34; One of the Red Hat solutions article suggested to verify the file ownership of the files, directories in the volume and compare it to the uid of the registry</description>
    </item>
    
    <item>
      <title>Configuring couchbase SSL for dynamic certificates in Openshift</title>
      <link>https://vikaspogu.dev/posts/couchbase-ssl-openshift/</link>
      <pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://vikaspogu.dev/posts/couchbase-ssl-openshift/</guid>
      <description>If you have followed dynamic creation of java keystores in openshift post and wondered how to use similar concepts for couchbase database and a java application. This post will help you.
Couchbase setup This is the couchbase documentation for configuring server side certificates, we are interested in last few steps since openshift will generate key and cert by adding annotation to the couchbase service.
Note: By adding this annotation you can dynamically create certificates service.</description>
    </item>
    
    <item>
      <title>TektonCD on Openshift</title>
      <link>https://vikaspogu.dev/posts/intro-tektoncd-ocp/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://vikaspogu.dev/posts/intro-tektoncd-ocp/</guid>
      <description>Recently I came across tektoncd project, The Tekton Pipelines project provides Kubernetes-style resources for declaring CI/CD-style pipelines caught my attention and started playing with it.
Basic Concepts In order to create a tekton pipeline, one does the following:
 Create custom or install existing reusable Tasks Create a Pipeline and PipelineResources to define your application&amp;rsquo;s delivery pipeline Create a PipelineRun to instantiate and invoke the pipeline  Installing Tekton on Openshift Login as a user with cluster-admin privileges</description>
    </item>
    
    <item>
      <title>Deleting a OpenShift project stuck in terminating state</title>
      <link>https://vikaspogu.dev/posts/project-terminating/</link>
      <pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://vikaspogu.dev/posts/project-terminating/</guid>
      <description>Recently I was faced an issue where one of my project was stuck in terminating state for days. The workaround below fixed the issue.
Export OpenShift project as an JSON Object
oc get project delete-me -o json &amp;gt; ns-without-finalizers.json Replace below from
spec: finalizers: - kubernetes to
spec: finalizers: [] On one of the master node, execute these commands.
kubectl proxy &amp;amp; PID=$! curl -X PUT http://localhost:8001/api/v1/namespaces/delete-me/finalize \ -H &amp;#34;Content-Type: application/json&amp;#34; --data-binary @ns-without-finalizers.</description>
    </item>
    
    <item>
      <title>Spring Boot metrics with Prometheus and Grafana in OpenShift</title>
      <link>https://vikaspogu.dev/posts/springboot-metrics-grafana/</link>
      <pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://vikaspogu.dev/posts/springboot-metrics-grafana/</guid>
      <description>In this post I&amp;rsquo;ll discuss how to monitor spring boot application metrics using Prometheus and Grafana.
Prometheus Prometheus is a monitoring system which collects metrics from configured targets at given intervals.
Grafana Grafana is an open source metric analytics &amp;amp; visualization tool.
Micrometer Micrometer is a metrics instrumentation library for JVM-based applications.
Spring Boot Actuator Spring Boot Actuator helps you monitor and manage your application when itâ€™s pushed to production. You can choose to manage and monitor your application using HTTP or JMX endpoints.</description>
    </item>
    
    <item>
      <title>Debugging a Java application in OpenShift</title>
      <link>https://vikaspogu.dev/posts/debug-java-container/</link>
      <pubDate>Tue, 14 May 2019 14:36:27 -0500</pubDate>
      
      <guid>https://vikaspogu.dev/posts/debug-java-container/</guid>
      <description>This post will discuss debugging a JAVA application running inside a container. First, you must set the JAVA_DEBUG environment variable inside the container to true and configure port forwarding so that you can connect to your application from a remote debugger.
Note: If you are using tomcat image replace JAVA_DEBUG environment variable to DEBUG
Using the oc command, list the available deployment configurations:
$ oc get dc Set the JAVA_DEBUG environment variable in the deployment configuration of your application to true, which configures the JVM to open the port number 5005 for debugging.</description>
    </item>
    
    <item>
      <title>Debugging a .NET Core application running on OpenShift</title>
      <link>https://vikaspogu.dev/posts/debug-netcore-openshift/</link>
      <pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://vikaspogu.dev/posts/debug-netcore-openshift/</guid>
      <description>This post is about how to remote debug a ASP.NET Core application on OpenShift using Visual Studio Code. You can use any Microsoft proprietary debugger engine vsdbg with Visual Studio Code.
First, list the available .Net application pods using oc command.
$ oc get pod NAME READY STATUS RESTARTS AGE MY_APP_NAME-3-1xrsp 0/1 Running 0 6s $ oc rsh MY_APP_NAME-3-1xrsp sh-4.2$ curl -sSL https://aka.ms/getvsdbgsh | bash /dev/stdin -v latest -l /opt/app-root/vsdbg -r linux-x64 Note: If you&amp;rsquo;re container is running behind a corporate proxy and cannot access internet, you&amp;rsquo;ll have to build base dotnet image with the debugger engine vsdbg installed in it.</description>
    </item>
    
    <item>
      <title>Profiling a application in OpenShift container</title>
      <link>https://vikaspogu.dev/posts/javaprofiler-openshift/</link>
      <pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://vikaspogu.dev/posts/javaprofiler-openshift/</guid>
      <description>Sometimes writing code that just runs is not enough. We might want to know what goes on internally such as how memory is allocated, consequences of using one coding approach over another, implications of concurrent executions, areas to improve performance, etc. We can use profilers for this.
In this post I&amp;rsquo;ll discuss how to use YourKit-JavaProfiler inside a container.
Since my sample application is built using OpenShift S2I process and pushed into openshift internal registry, I&amp;rsquo;ll have to pull the image locally.</description>
    </item>
    
  </channel>
</rss>
