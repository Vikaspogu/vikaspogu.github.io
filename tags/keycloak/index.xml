<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>keycloak on My approach...</title>
    <link>https://vikaspogu.dev/tags/keycloak/</link>
    <description>Recent content in keycloak on My approach...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://vikaspogu.dev/tags/keycloak/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>End User Auth and Authz with OpenShift Service Mesh and Keycloak</title>
      <link>https://vikaspogu.dev/posts/servicemesh-jwt-auth-authz-keycloack/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vikaspogu.dev/posts/servicemesh-jwt-auth-authz-keycloack/</guid>
      <description>In this article, I will share the setup for enabling Authentication and Authorization in OpenShift Service Mesh with Keycloak
Installing OpenShift Service Mesh Follow the Installing Red Hat OpenShift Service Mesh guide for setup
Enable following configuration in your ServiceMeshControlPlane resource
 Strict mTLS across the mesh Automatic istio route creation  apiVersion:maistra.io/v2kind:ServiceMeshControlPlanespec:version:v1.1security:controlPlane:mtls:truegateways:OpenShiftRoute:enabled:trueKeycloak Keycloak is an open-source identity and access management application that uses open protocols and is easily integrated with other providers.</description>
    </item>
    
    <item>
      <title>Go JWT Authentication with keycloak</title>
      <link>https://vikaspogu.dev/posts/sso-jwt-golang/</link>
      <pubDate>Sat, 27 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://vikaspogu.dev/posts/sso-jwt-golang/</guid>
      <description>Recently I was working on a React project with Go backend using Gin web framework. Keycloak was the authentication mechanism for the frontend; I also wanted to secure the backend using JSON Web Tokens which was provided by Keycloak on every login. Setup for jwt verification in Go was easy.
First, copy RS256 algorithm public key value from Keycloak
 sso_setup 
Send the token as Authorization header
axios .get(BACKEND_URL.concat(&amp;#34;sampleendpoint&amp;#34;), { headers: { Authorization: this.</description>
    </item>
    
    <item>
      <title>React App with RedHat SSO or keycloak</title>
      <link>https://vikaspogu.dev/posts/redhat-sso-react/</link>
      <pubDate>Thu, 25 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://vikaspogu.dev/posts/redhat-sso-react/</guid>
      <description>In this post, I will show you how to secure a React app using RedHat SSO (upstream keycloak). In this case, openid-connect is my identity provider.
 sso_setup 
Install the official keycloak js adapter
npm i keycloak-js --save Setup the client with the host and port; in my case it&amp;rsquo;s localhost:9000
 sso_setup 
In App.js add in a JavaScript object with the required configuration; you will find these configurations under Clients-&amp;gt;Installation</description>
    </item>
    
  </channel>
</rss>
