<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Vikas Pogu</title>
    <link>https://vikaspogu.dev/tags/golang/</link>
    <description>Recent content in golang on Vikas Pogu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright Â© 2021</copyright>
    <lastBuildDate>Mon, 16 Dec 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://vikaspogu.dev/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Basic Authentication in Go with Gin</title>
      <link>https://vikaspogu.dev/blog/golang-basicauth-gin/</link>
      <pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://vikaspogu.dev/blog/golang-basicauth-gin/</guid>
      <description>This short post looks at adding basic authentication to GoLang applications. Below example application uses the gin web framework.
Let&amp;rsquo;s start by creating a gin router with default middleware. By default, it serves on :8080 unless we define a PORT environment variable.
func main(){ r := gin.Default() r.GET(&amp;#34;/getAllUsers&amp;#34;, basicAuth, handlers.UsersList) _ = r.Run() } Now that we have our primary route let us create a method to add authentication logic. First, get basic auth credentials from the context request and validate them.</description>
    </item>
    
    <item>
      <title>Go JWT Authentication with Keycloak</title>
      <link>https://vikaspogu.dev/blog/sso-jwt-golang/</link>
      <pubDate>Sat, 27 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://vikaspogu.dev/blog/sso-jwt-golang/</guid>
      <description>I recently worked on a React project with Go backend using Gin web framework. Keycloak was the authentication mechanism for the front end; I also wanted to secure the back end using JSON Web Tokens, which Keycloak provided on every login. JWT verification setup in the Go application was easy.
First, copy the RS256 algorithm public key value from Keycloak.
Send the token as an Authorization header.
axios .get(BACKEND_URL.concat(&amp;#34;sampleendpoint&amp;#34;), { headers: { Authorization: this.</description>
    </item>
    
  </channel>
</rss>
