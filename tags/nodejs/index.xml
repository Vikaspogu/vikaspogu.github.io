<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NodeJS on vikaspogu</title>
    <link>https://vikaspogu.dev/tags/nodejs/</link>
    <description>Recent content in NodeJS on vikaspogu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 05 Jul 2020 16:26:22 -0500</lastBuildDate><atom:link href="https://vikaspogu.dev/tags/nodejs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Raspberry Pi garage door opener using nodejs on k3s cluster</title>
      <link>https://vikaspogu.dev/posts/pi-garage-k3s/</link>
      <pubDate>Sun, 05 Jul 2020 16:26:22 -0500</pubDate>
      
      <guid>https://vikaspogu.dev/posts/pi-garage-k3s/</guid>
      <description>There are many articles out there which demonstartes how to use a raspberry pi as a DIY garage door opener project. Few are outdated and not deployed using containers images. I found couple good solutions on google but i wasn&amp;rsquo;t able to run them on kubernetes cluster either due to older packages or no enough information. I decided to build my own solution from different sources of information i found</description>
    </item>
    
    <item>
      <title>Slack bot with Nodejs</title>
      <link>https://vikaspogu.dev/posts/nodejs-slack-bot/</link>
      <pubDate>Sat, 04 Jul 2020 15:08:54 -0500</pubDate>
      
      <guid>https://vikaspogu.dev/posts/nodejs-slack-bot/</guid>
      <description>Build your own personal slack bot in few steps. In this post we&amp;rsquo;ll navigate through process of creating the bot.
Slack setup First create a slack workspace
 Give your workspace a name  Create a new bot at slack apps
 Give your new app a name Choose workspace you created before to install the app  Then go to Features &amp;gt; OAuth &amp;amp; Permissions screen to scroll down to Bot Token Scopes to specify the OAuth scopes, select app_mentions and chat_write to enable the bot to send messages.</description>
    </item>
    
    <item>
      <title>Authenticate a Node application with LDAP</title>
      <link>https://vikaspogu.dev/posts/node-ldap-auth/</link>
      <pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://vikaspogu.dev/posts/node-ldap-auth/</guid>
      <description>This post demonstrates how to authenticate a user against LDAP.
Let&amp;rsquo;s start by installing basic-auth and ldapauth-fork packages
npm install ldapauth-fork npm install basic-auth Steps for implementation;
 Add packages Create a ldap variable with authentication configuration Basic auth should prompt for you username and password. Once user is found, verify the given password by trying to bind the user client with the found LDAP user object and given password.  const auth = require(&amp;#34;basic-auth&amp;#34;); var LdapAuth = require(&amp;#34;ldapauth-fork&amp;#34;); var ldap = new LdapAuth({ url: &amp;#34;ldap://ldap-url:389&amp;#34;, bindDN: &amp;#34;uid=rc,ou=AppAccounts,ou=People,ou=Entsys,dc=example.</description>
    </item>
    
  </channel>
</rss>
