<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Vikas Pogu</title>
    <link>https://vikaspogu.dev/tags/java/</link>
    <description>Recent content in Java on Vikas Pogu</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright Â© 2021</copyright>
    <lastBuildDate>Tue, 14 May 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://vikaspogu.dev/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Debugging a Java application in OpenShift</title>
      <link>https://vikaspogu.dev/blog/debug-java-container/</link>
      <pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://vikaspogu.dev/blog/debug-java-container/</guid>
      <description>This post will discuss debugging a JAVA application running inside a container.
Red Hat container images # When you bootstrap your JVM, you should have a way to enable JVM debug. For example Red Hat S2I images allows you to control classpath and debugging via environment variables.
# Set debug options if required if [ x&amp;#34;${JAVA_DEBUG}&amp;#34; != x ] &amp;amp;&amp;amp; [ &amp;#34;${JAVA_DEBUG}&amp;#34; != &amp;#34;false&amp;#34; ]; then java_debug_args=&amp;#34;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=${JAVA_DEBUG_PORT:-5005}&amp;#34; fi Setting the JAVA_DEBUG environment variable inside the container to true will add debug args to JVM startup command Configure port forwarding so that you can connect to your application from a remote debugger If you are using tomcat image replace JAVA_DEBUG environment variable to DEBUG</description>
    </item>
    
    <item>
      <title>Profiling a application in OpenShift container</title>
      <link>https://vikaspogu.dev/blog/javaprofiler-openshift/</link>
      <pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://vikaspogu.dev/blog/javaprofiler-openshift/</guid>
      <description>Sometimes writing code that just runs is not enough. We might want to know what goes on internally such as how memory is allocated, consequences of using one coding approach over another, implications of concurrent executions, areas to improve performance, etc. We can use profilers for this.
In this post I&amp;rsquo;ll discuss how to use YourKit-JavaProfiler inside a container.
Since my sample application is built using OpenShift S2I process and pushed into OpenShift internal registry, I&amp;rsquo;ll have to pull the image locally.</description>
    </item>
    
  </channel>
</rss>
